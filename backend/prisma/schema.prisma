generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  firstName           String
  lastName            String
  avatarUrl           String?
  role                UserRole       @default(USER)
  permissions         Json           @default("[]")
  preferences         Json           @default("{}")
  isActive            Boolean        @default(true)
  emailVerified       Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  password            String?
  comments            Comment[]
  files               File[]
  notifications       Notification[]
  managedProjects     Project[]      @relation("ProjectManager")
  assignedTasks       Task[]
  approvedTimeEntries TimeEntry[]    @relation("TimeApprover")
  timeEntries         TimeEntry[]

  @@map("users")
}

model Project {
  id              String           @id @default(cuid())
  name            String
  description     String?
  status          ProjectStatus    @default(ACTIVE)
  priority        PriorityLevel    @default(MEDIUM)
  startDate       DateTime?
  endDate         DateTime?
  budget          Decimal?
  managerId       String
  teamMembers     String[]         @default([])
  tags            String[]         @default([])
  settings        Json             @default("{}")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  burndownData    Json             @default("[]")
  category        String?
  categoryId      String?
  isTemplate      Boolean          @default(false)
  progress        Float            @default(0)
  templateId      String?
  velocity        Float?
  deletedAt       DateTime?
  deletedBy       String?
  isDeleted       Boolean          @default(false)
  comments        Comment[]
  files           File[]
  milestones      Milestone[]
  projectCategory ProjectCategory? @relation(fields: [categoryId], references: [id])
  manager         User             @relation("ProjectManager", fields: [managerId], references: [id])
  projectTemplate ProjectTemplate? @relation(fields: [templateId], references: [id])
  tasks           Task[]
  timeEntries     TimeEntry[]

  @@map("projects")
}

model Task {
  id              String        @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus    @default(TODO)
  priority        PriorityLevel @default(MEDIUM)
  assigneeId      String?
  projectId       String
  parentTaskId    String?
  estimatedHours  Decimal?
  actualHours     Decimal       @default(0)
  dueDate         DateTime?
  tags            String[]      @default([])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  dependencies    String[]      @default([])
  isTemplate      Boolean       @default(false)
  prerequisites   String[]      @default([])
  storyPoints     Int?
  templateId      String?
  workflowHistory Json          @default("[]")
  workflowStep    Int           @default(0)
  comments        Comment[]
  files           File[]
  assignee        User?         @relation(fields: [assigneeId], references: [id])
  parentTask      Task?         @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  subtasks        Task[]        @relation("TaskHierarchy")
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries     TimeEntry[]

  @@map("tasks")
}

model Milestone {
  id                 String    @id @default(cuid())
  name               String
  description        String?
  projectId          String
  dueDate            DateTime
  completedAt        DateTime?
  dependencies       String[]  @default([])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  acceptanceCriteria String?
  deliverables       String[]  @default([])
  isCritical         Boolean   @default(false)
  progress           Float     @default(0)
  comments           Comment[]
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model TimeEntry {
  id              String    @id @default(cuid())
  userId          String
  taskId          String?
  projectId       String?
  description     String?
  startTime       DateTime
  endTime         DateTime?
  durationMinutes Int?
  category        String?
  tags            String[]  @default([])
  isApproved      Boolean   @default(false)
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  approver        User?     @relation("TimeApprover", fields: [approvedBy], references: [id])
  project         Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task            Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Comment {
  id              String     @id @default(cuid())
  content         String
  userId          String
  projectId       String?
  taskId          String?
  milestoneId     String?
  parentCommentId String?
  mentions        String[]   @default([])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  milestone       Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  parentComment   Comment?   @relation("CommentThread", fields: [parentCommentId], references: [id])
  replies         Comment[]  @relation("CommentThread")
  project         Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task            Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  files           File[]

  @@map("comments")
}

model File {
  id              String   @id @default(cuid())
  filename        String
  originalName    String
  mimeType        String
  sizeBytes       BigInt
  storagePath     String
  storageProvider String   @default("S3")
  uploadedBy      String
  projectId       String?
  taskId          String?
  commentId       String?
  version         Int      @default(1)
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  comment         Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  project         Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task            Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("files")
}

model ProjectCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  color       String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]

  @@map("project_categories")
}

model ProjectTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  category    String?
  settings    Json      @default("{}")
  isPublic    Boolean   @default(false)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]

  @@map("project_templates")
}

model TaskTemplate {
  id             String        @id @default(cuid())
  name           String
  description    String?
  category       String?
  estimatedHours Decimal?
  storyPoints    Int?
  priority       PriorityLevel @default(MEDIUM)
  tags           String[]      @default([])
  isPublic       Boolean       @default(false)
  createdBy      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("task_templates")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json             @default("{}")
  isRead    Boolean          @default(false)
  readAt    DateTime?
  sentAt    DateTime         @default(now())
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATED
  COMMENT_MENTION
  MILESTONE_DUE
  TIME_APPROVAL
}
